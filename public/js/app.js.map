{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["'use strict';\n\n(function() {\n\n    angular\n        .module('app', []);\n\n})();\n\n(function() {\n\n    angular\n        .module('app')\n        .factory('Ec2Instance', Ec2Instance);\n\n    function Ec2Instance() {\n        var Ec2Instance = function(data) {\n\n            angular.extend(this, {\n                isPending : function() {\n                    return (this.status.name === 'pending');\n                },\n                isInitializing : function() {\n                    return ((this.status.name === 'running') &&\n                            (this.status.instanceStatus !== 'ok') &&\n                            (this.status.systemStatus !== 'ok'));\n                },\n                isReady : function() {\n                    return ((this.status.name === 'running') &&\n                            (this.status.instanceStatus === 'ok') &&\n                            (this.status.systemStatus === 'ok'));\n                },\n                percentage : function() {\n                    if (this.isPending()) {\n                        return 25;\n                    }\n\n                    if (((this.status.instanceStatus === 'initializing') &&\n                         (this.status.systemStatus === 'initializing')) ||\n                        ((this.status.instanceStatus === undefined) &&\n                        (this.status.systemStatus === undefined))) {\n                        return 50;\n                    }\n                    if (((this.status.instanceStatus === 'initializing') &&\n                                (this.status.systemStatus === 'ok')) ||\n                               ((this.status.systemStatus === 'initializing') &&\n                                (this.status.instanceStatus === 'ok'))) {\n                        return 75;\n                    }\n\n                    if (this.isReady()) {\n                        return 100;\n                    }\n                }\n            });\n            angular.extend(this, data);\n        };\n\n        return Ec2Instance;\n    }\n\n})();\n\n(function() {\n\n    angular\n        .module('app')\n        .service('launcherService', launcherService);\n\n    launcherService.$inject = ['$http', '$window', 'Ec2Instance'];\n\n    function launcherService($http, $window, Ec2Instance) {\n\n        var urls = $window.launcher.urls;\n\n        this.launchAmi = function(credentials, successCallback, errorCallback) {\n            $http.post(urls.launchAmi, {credentials})\n                .then(\n                    function(response) {\n                        successCallback(new Ec2Instance(response.data));\n                        return;\n                    },\n                    function(response) {\n                        errorCallback(response.data);\n                    });\n        }\n\n        this.getInstance = function(credentials, instance, successCallback, errorCallback) {\n            var params = {credentials : credentials,\n                          instanceId  : instance.instanceId};\n            \n            $http.get(urls.instance, {params})\n                .then(\n                    function(response) {\n                        successCallback(new Ec2Instance(response.data));\n                        return;\n                    },\n                    function(response) {\n                        errorCallback(response.data);\n                    });\n        }\n\n        this.getInstanceStatus = function(credentials, instance, successCallback, errorCallback) {\n            var params = {credentials : credentials,\n                          instanceId  : instance.instanceId};\n            \n            $http.get(urls.instanceStatus, {params})\n                .then(\n                    function(response) {\n                        successCallback(response.data);\n                        return;\n                    },\n                    function(response) {\n                        errorCallback(response.data);\n                    });\n        }\n\n    }\n\n})();\n\n(function() {\n\n    angular\n        .module('app')\n        .controller('LauncherController', LauncherController);\n\n    LauncherController.$inject = ['$scope', '$window', '$timeout', 'launcherService'];\n\n    function LauncherController($scope, $window, $timeout, launcherService) {\n        var vm = this;\n\n        vm.credentials = {};\n\n        vm.launchStarted = false;\n\n        vm.errors = {};\n        vm.thereAreErrors = false;\n\n        vm.launchAmi = function(launchForm) {         \n            vm.hideErrors();\n            vm.launchStarted = true;\n            launcherService.launchAmi(vm.credentials,\n                function(ec2Instance) {\n                    vm.ec2Instance = ec2Instance;\n                    keepUpdatingUntilReady();\n                },\n                function(errors) {\n                    console.log(errors);\n                    if (errors.hasOwnProperty('accessKey')) {\n                        launchForm.$setValidity(\"accessKey\", false);    \n                    }\n                    if (errors.hasOwnProperty('secretKey')) {\n                        launchForm.$setValidity(\"secretKey\", false);\n                    }\n                    vm.launchStarted = false;\n                    showErrors(errors);\n                }\n            );\n        }\n\n        vm.hideErrors = function() {\n            vm.errors = {};\n            vm.thereAreErrors = false;\n        }\n\n        $window.onbeforeunload = function(){\n          return 'Are you sure you want to leave?';\n        };\n\n        function showErrors(errors) {\n            vm.errors = errors;\n            vm.thereAreErrors = true;\n        }\n\n        function keepUpdatingUntilReady() {\n            if (vm.ec2Instance.isPending()) {\n                $timeout(updateInstance, 3000)\n            } else if (vm.ec2Instance.isInitializing()) {\n                $timeout(updateInstanceStatus, 3000)\n            }\n        }\n\n        function updateInstance() {\n            launcherService.getInstance(vm.credentials, vm.ec2Instance,\n                function(ec2Instance) {\n                    vm.ec2Instance = ec2Instance;\n                    keepUpdatingUntilReady();\n                },\n                function(errors) {\n                    showErrors(errors);\n                });\n        }\n\n        function updateInstanceStatus() {\n            launcherService.getInstanceStatus(vm.credentials, vm.ec2Instance,\n                function(ec2InstanceStatus) {\n                    vm.ec2Instance.status = ec2InstanceStatus;\n                    keepUpdatingUntilReady();\n                },\n                function(errors) {\n                    showErrors(errors);\n                });\n        }\n\n    }\n\n})();\n"],"sourceRoot":"/source/"}